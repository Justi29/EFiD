colnames(prognoza_log_cena) <- c("Prognoza_Log_Cena")
predictions_pkt6 <- data.frame(
Zamkniecie_pred = NA,
Lower_cena = NA,
Upper_cena = NA,
Zamkniecie_log_pred = prognoza_log_cena$Prognoza_Log_Cena,
Lower_log_cena = NA,
Upper_log_cena = NA,
Stopa_zwrotu_log_pred = prognozy_stop_zwr$Prognoza_Stopy_Zwrotu,
Lower_st_zw = NA,
Upper_st_zw = NA
)
for (i in 1:4){
mi <- predictions_pkt6[i,"Zamkniecie_log_pred"]
temp_df <- as.data.frame(c(train$Zamkniecie_log, predictions_pkt6$Zamkniecie_log[1:i]))
colnames(temp_df) <- c("Zamkniecie_log_combined")
# Odchylenie standardowe
sd <- sd(temp_df$Zamkniecie_log_combined)
# Prognozowana cena
predictions_pkt6[i,"Zamkniecie_pred"] <- exp(mi+sd/2)
# Obliczanie przedziałów ufności dla logarytmicznych cen
z_value <- qnorm(0.975)
predictions_pkt6[i, "Lower_log_cena"] <- mi - z_value * (sd / sqrt(nrow(temp_df)))
predictions_pkt6[i, "Upper_log_cena"] <- mi + z_value * (sd / sqrt(nrow(temp_df)))
# Obliczanie przedziałów ufności dla cen
mi_2 <- predictions_pkt6[i,"Zamkniecie_pred"]
temp_df_2 <- as.data.frame(c(train$Zamkniecie, predictions_pkt6$Zamkniecie_pred[1:i]))
colnames(temp_df_2) <- c("Zamkniecie_combined")
sd_2 <- sd(temp_df_2$Zamkniecie_combined)
predictions_pkt6[i, "Lower_cena"] <- mi_2 - z_value * (sd_2 / sqrt(nrow(temp_df_2)))
predictions_pkt6[i, "Upper_cena"] <- mi_2 + z_value * (sd_2 / sqrt(nrow(temp_df_2)))
# Obliczanie przedziałów ufności dla logarytmicznych stóp zwrotu
mi_3 <- predictions_pkt6[i,"Stopa_zwrotu_log_pred"]
temp_df_3 <- as.data.frame(c(train$Stopa_zwrotu_log, predictions_pkt6$Stopa_zwrotu_log_pred[1:i]))
colnames(temp_df_3) <- c("Stopa_zwrotu_combined")
sd_3 <- sd(temp_df_3$Stopa_zwrotu_combined)
predictions_pkt6[i, "Lower_st_zw"] <- mi_3 - z_value * (sd_3 / sqrt(nrow(temp_df_3)))
predictions_pkt6[i, "Upper_st_zw"] <- mi_3 + z_value * (sd_3 / sqrt(nrow(temp_df_3)))
}
paged_table(predictions_pkt6)
# Porównanie rzeczywistych wartości z predykcjami
result_df_pkt6 <- as.data.frame(cbind(test$Zamkniecie, predictions_pkt6$Zamkniecie_pred, test$Zamkniecie_log, predictions_pkt6$Zamkniecie_log_pred, test$Stopa_zwrotu_log, predictions_pkt6$Stopa_zwrotu_log_pred))
colnames(result_df_pkt6) <- c("Zamkniecie","Zamkniecie_pred","Zamkniecie_log","Zamkniecie_log_pred","Stopa_zwrotu_log","Stopa_zwrotu_log_pred")
paged_table(result_df_pkt6)
# Porównanie rzeczywistych wartości z predykcjami
result_df_pkt6 <- as.data.frame(cbind(test$Zamkniecie, predictions_pkt6$Zamkniecie_pred, test$Zamkniecie_log, predictions_pkt6$Zamkniecie_log_pred, test$Stopa_zwrotu_log, predictions_pkt6$Stopa_zwrotu_log_pred))
colnames(result_df_pkt6) <- c("Zamkniecie","Zamkniecie_pred","Zamkniecie_log","Zamkniecie_log_pred","Stopa_zwrotu_log","Stopa_zwrotu_log_pred")
paged_table(result_df_pkt6)
residuals(fit2)
set.seed(123)
reszty_fit2 <- residuals(fit2)
prognozy_log_bootstrap <- matrix(0, nrow = n_bootstrap, ncol = n_prognoz)
ostatni_log <- tail(train$Zamkniecie_log, 1)
for (j in 1:n_bootstrap) {
prognozy_log_bootstrap[j, 1] <- ostatni_log + sample(reszty_fit2, 1, replace = TRUE)
for (i in 2:n_prognoz) {
prognozy_log_bootstrap[j, i] <- prognozy_log_bootstrap[j, i - 1] + sample(reszty_fit2, 1, replace = TRUE)
}
}
prognozy_ceny_bootstrap <- exp(prognozy_log_bootstrap)
log_forecast_mean_bootstrap <- apply(prognozy_log_bootstrap, 2, mean)
log_ci_lower_bootstrap <- apply(prognozy_log_bootstrap, 2, function(x) quantile(x, probs = 0.025))
log_ci_upper_bootstrap <- apply(prognozy_log_bootstrap, 2, function(x) quantile(x, probs = 0.975))
cena_forecast_mean_bootstrap <- apply(prognozy_ceny_bootstrap, 2, mean)
cena_ci_lower_bootstrap <- apply(prognozy_ceny_bootstrap, 2, function(x) quantile(x, probs = 0.025))
cena_ci_upper_bootstrap <- apply(prognozy_ceny_bootstrap, 2, function(x) quantile(x, probs = 0.975))
log_ceny_bootstrap_results <- data.frame(
Horyzont_Prognozy = 1:n_prognoz,
Srednia_Log_Ceny = log_forecast_mean_bootstrap,
Dolny_Przedzial95_Log = log_ci_lower_bootstrap,
Gorny_Przedzial95_Log = log_ci_upper_bootstrap
)
ceny_bootstrap_results <- data.frame(
Horyzont_Prognozy = 1:n_prognoz,
Srednia_Ceny = cena_forecast_mean_bootstrap,
Dolny_Przedzial95_Cena = cena_ci_lower_bootstrap,
Gorny_Przedzial95_Cena = cena_ci_upper_bootstrap
)
paged_table(log_ceny_bootstrap_results)
paged_table(ceny_bootstrap_results)
library(rmarkdown)
library(tseries)
library(forecast)
library(lmtest)
library(FinTS)
library(rugarch)
dane <- read.csv2("bcm_d.csv", sep = ",", dec = ".", header = T)
paged_table(dane)
df <- data.frame(Data = as.Date(dane$Data), Zamkniecie = dane$Zamkniecie, Zamkniecie_log = NA, Stopa_zwrotu_log = NA)
# Log ceny
for (i in 1:nrow(df)){
df[i, 3] <- log(df[i,2])
}
# Stopy zwrotu logarytmiczne
for (i in 2:nrow(df)){
df[i, 4] <- log(df[i, 2]/df[i-1, 2])
}
new_df <- df[-1,]
# Nowe dane
paged_table(new_df)
train <- new_df[-((nrow(new_df)-3):nrow(new_df)), ]
test <-  tail(new_df, 4)
adf.test(train$Zamkniecie_log) # niestacjonarny
#  p-value = 0.7739 > 0.05
adf.test(train$Stopa_zwrotu_log) # stacjonarny
# p-value = 0.01 < 0.05
model <- auto.arima(train$Stopa_zwrotu_log)
model
# składnik losowy == reszty
reszty <- model$residuals
# autokorelacja
Acf(reszty, main="ACF - Stopy zwrotu log")
Box.test(reszty, lag = 1, type = "Ljung-Box")$p.value
# 0.8797915 > 0.05 brak autokorelacji
# u nas 1 opoznienie
coeftest(model)
cat("Średnia reszt: ", mean(reszty), "\n")
t.test(reszty, mu = 0) # p-value = 0.9615 -> H0: średnia reszt = 0
reszty_sq <- reszty^2
Box.test(reszty_sq, lag = 1, type = "Ljung-Box") # p-value = 0.1194 -> brak autokorelacji
# Test Arch na heteroskedastyczność
ArchTest(reszty, lags = 1) # p-value = 0.122 -> no ARCH effects
model_2 <- auto.arima(train$Zamkniecie_log)
model_2
stopy_zwr_model <- arima(train$Stopa_zwrotu_log, order=c(0,0,1))
ceny_log_model <- arima(train$Zamkniecie_log, order=c(0,1,1))
forecast_values <- forecast(stopy_zwr_model, h=4, level=95)
predict <- as.data.frame(forecast_values)
real_values <- tail(test$Stopa_zwrotu_log, 4)
comparison <- data.frame(
Actual = real_values,
Forecast = predict$`Point Forecast`,
Lower95 = predict$`Lo 95`,
Upper95 = predict$`Hi 95`
)
paged_table(comparison)
forecast_values <- forecast(ceny_log_model, h=4, level=95)
predict_2 <- as.data.frame(forecast_values)
real_values <- tail(test$Zamkniecie_log, 4)
comparison_2 <- data.frame(
Actual = real_values,
Forecast = predict_2$`Point Forecast`,
Lower95 = predict_2$`Lo 95`,
Upper95 = predict_2$`Hi 95`
)
paged_table(comparison_2)
predictions <- data.frame(
Zamkniecie_pred = NA,
Lower_cena = NA,
Upper_cena = NA,
Zamkniecie_log_pred = predict_2$`Point Forecast`,
Lower_log_cena = NA,
Upper_log_cena = NA,
Stopa_zwrotu_log_pred = predict$`Point Forecast`,
Lower_st_zw = predict$`Lo 95`,
Upper_st_zw = predict$`Hi 95`
)
# Old version
# Ostatnia znana cena log
# cena_log <- train[nrow(train),3]
#
# Predykcja logarytmicznych cen
# for (i in 1:4){
#   stopa_zwrotu <- predictions[i,"Stopa_zwrotu_log_pred"]
#   predictions[i,"Zamkniecie_log_pred"] <- cena_log + stopa_zwrotu
#   cena_log <- predictions[i,"Zamkniecie_log_pred"]
# }
# Predykcja cen
for (i in 1:4){
mi <- predictions[i,"Zamkniecie_log_pred"]
temp_df <- as.data.frame(c(train$Zamkniecie_log, predictions$Zamkniecie_log[1:i]))
colnames(temp_df) <- c("Zamkniecie_log_combined")
# Odchylenie standardowe
sd <- sd(temp_df$Zamkniecie_log_combined)
# Prognozowana cena
predictions[i,"Zamkniecie_pred"] <- exp(mi+sd/2)
# Obliczanie przedziałów ufności dla logarytmicznych cen
z_value <- qnorm(0.975)
predictions[i, "Lower_log_cena"] <- mi - z_value * (sd / sqrt(nrow(temp_df)))
predictions[i, "Upper_log_cena"] <- mi + z_value * (sd / sqrt(nrow(temp_df)))
# Obliczanie przedziałów ufności dla cen
mi_2 <- predictions[i,"Zamkniecie_pred"]
temp_df_2 <- as.data.frame(c(train$Zamkniecie, predictions$Zamkniecie_pred[1:i]))
colnames(temp_df_2) <- c("Zamkniecie_combined")
sd_2 <- sd(temp_df_2$Zamkniecie_combined)
predictions[i, "Lower_cena"] <- mi_2 - z_value * (sd_2 / sqrt(nrow(temp_df_2)))
predictions[i, "Upper_cena"] <- mi_2 + z_value * (sd_2 / sqrt(nrow(temp_df_2)))
}
paged_table(predictions)
result_df <- as.data.frame(cbind(test$Zamkniecie, predictions$Zamkniecie_pred, test$Zamkniecie_log, predictions$Zamkniecie_log, test$Stopa_zwrotu_log, predictions$Stopa_zwrotu_log_pred))
colnames(result_df) <- c("Zamkniecie","Zamkniecie_pred","Zamkniecie_log","Zamkniecie_log_pred","Stopa_zwrotu_log","Stopa_zwrotu_log_pred")
paged_table(result_df)
reszty_2 <- residuals(ceny_log_model)
mu <- 0
sigma <- sd(reszty_2)
n_symulacji <- 1000
n_prognoz <- 4
prognozy_log <- matrix(0, nrow = n_symulacji, ncol = n_prognoz)
ostatni_log <- tail(train$Zamkniecie_log, 1)
set.seed(123)
for (j in 1:n_symulacji) {
prognozy_log[j, 1] <- ostatni_log + rnorm(1, mean = mu, sd = sigma)
for (i in 2:n_prognoz) {
prognozy_log[j, i] <- prognozy_log[j, i - 1] + rnorm(1, mean = mu, sd = sigma)
}
}
prognozy_ceny <- exp(prognozy_log + (sigma^2 / 2))
log_forecast_mean <- apply(prognozy_log, 2, mean)
log_ci_lower <- apply(prognozy_log, 2, function(x) quantile(x, probs = 0.025))
log_ci_upper <- apply(prognozy_log, 2, function(x) quantile(x, probs = 0.975))
cena_forecast_mean <- apply(prognozy_ceny, 2, mean)
cena_ci_lower <- apply(prognozy_ceny, 2, function(x) quantile(x, probs = 0.025))
cena_ci_upper <- apply(prognozy_ceny, 2, function(x) quantile(x, probs = 0.975))
log_ceny_results <- data.frame(
Horyzont_Prognozy = 1:n_prognoz,
Srednia_Log_Ceny = log_forecast_mean,
Dolny_Przedzial95_Log = log_ci_lower,
Gorny_Przedzial95_Log = log_ci_upper
)
ceny_results <- data.frame(
Horyzont_Prognozy = 1:n_prognoz,
Srednia_Ceny = cena_forecast_mean,
Dolny_Przedzial95_Cena = cena_ci_lower,
Gorny_Przedzial95_Cena = cena_ci_upper
)
paged_table(log_ceny_results)
paged_table(ceny_results)
set.seed(123)
n_bootstrap <- 1000
n_prognoz <- 4
reszty_2 <- residuals(ceny_log_model)
prognozy_log_bootstrap <- matrix(0, nrow = n_bootstrap, ncol = n_prognoz)
ostatni_log <- tail(train$Zamkniecie_log, 1)
for (j in 1:n_bootstrap) {
prognozy_log_bootstrap[j, 1] <- ostatni_log + sample(reszty_2, 1, replace = TRUE)
for (i in 2:n_prognoz) {
prognozy_log_bootstrap[j, i] <- prognozy_log_bootstrap[j, i - 1] + sample(reszty_2, 1, replace = TRUE)
}
}
prognozy_ceny_bootstrap <- exp(prognozy_log_bootstrap)
log_forecast_mean_bootstrap <- apply(prognozy_log_bootstrap, 2, mean)
log_ci_lower_bootstrap <- apply(prognozy_log_bootstrap, 2, function(x) quantile(x, probs = 0.025))
log_ci_upper_bootstrap <- apply(prognozy_log_bootstrap, 2, function(x) quantile(x, probs = 0.975))
cena_forecast_mean_bootstrap <- apply(prognozy_ceny_bootstrap, 2, mean)
cena_ci_lower_bootstrap <- apply(prognozy_ceny_bootstrap, 2, function(x) quantile(x, probs = 0.025))
cena_ci_upper_bootstrap <- apply(prognozy_ceny_bootstrap, 2, function(x) quantile(x, probs = 0.975))
log_ceny_bootstrap_results <- data.frame(
Horyzont_Prognozy = 1:n_prognoz,
Srednia_Log_Ceny = log_forecast_mean_bootstrap,
Dolny_Przedzial95_Log = log_ci_lower_bootstrap,
Gorny_Przedzial95_Log = log_ci_upper_bootstrap
)
ceny_bootstrap_results <- data.frame(
Horyzont_Prognozy = 1:n_prognoz,
Srednia_Ceny = cena_forecast_mean_bootstrap,
Dolny_Przedzial95_Cena = cena_ci_lower_bootstrap,
Gorny_Przedzial95_Cena = cena_ci_upper_bootstrap
)
paged_table(log_ceny_bootstrap_results)
paged_table(ceny_bootstrap_results)
reszty_st_zw <- residuals(stopy_zwr_model)
ArchTest(reszty_st_zw, lags = 1)
reszty_log <- residuals(ceny_log_model)
ArchTest(reszty_log, lags = 1)
# Dla arima(0,0,1), garch(1,1)
spec <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(0, 1), include.mean = TRUE),
distribution.model = "norm"
)
fit <- ugarchfit(spec = spec, data = train$Stopa_zwrotu_log)
# dla arima(0,1,1), garch(1,1)
spec2 <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(0, 1), include.mean = TRUE, arfima = TRUE),
distribution.model = "norm"
)
fit2 <- ugarchfit(spec = spec2, data = train$Zamkniecie_log)
# Prognoza logarytmicznych stóp zwrotu
prognoza_stop_zwr <- ugarchforecast(fit, n.ahead = 4)
prognozy_stop_zwr <- as.data.frame(fitted(prognoza_stop_zwr))
colnames(prognozy_stop_zwr) <- c("Prognoza_Stopy_Zwrotu")
# Prognoza logarytmicznych cen
prognoza_log_cena <- ugarchforecast(fit2, n.ahead = 4)
prognoza_log_cena <- as.data.frame(fitted(prognoza_log_cena))
colnames(prognoza_log_cena) <- c("Prognoza_Log_Cena")
predictions_pkt6 <- data.frame(
Zamkniecie_pred = NA,
Lower_cena = NA,
Upper_cena = NA,
Zamkniecie_log_pred = prognoza_log_cena$Prognoza_Log_Cena,
Lower_log_cena = NA,
Upper_log_cena = NA,
Stopa_zwrotu_log_pred = prognozy_stop_zwr$Prognoza_Stopy_Zwrotu,
Lower_st_zw = NA,
Upper_st_zw = NA
)
for (i in 1:4){
mi <- predictions_pkt6[i,"Zamkniecie_log_pred"]
temp_df <- as.data.frame(c(train$Zamkniecie_log, predictions_pkt6$Zamkniecie_log[1:i]))
colnames(temp_df) <- c("Zamkniecie_log_combined")
# Odchylenie standardowe
sd <- sd(temp_df$Zamkniecie_log_combined)
# Prognozowana cena
predictions_pkt6[i,"Zamkniecie_pred"] <- exp(mi+sd/2)
# Obliczanie przedziałów ufności dla logarytmicznych cen
z_value <- qnorm(0.975)
predictions_pkt6[i, "Lower_log_cena"] <- mi - z_value * (sd / sqrt(nrow(temp_df)))
predictions_pkt6[i, "Upper_log_cena"] <- mi + z_value * (sd / sqrt(nrow(temp_df)))
# Obliczanie przedziałów ufności dla cen
mi_2 <- predictions_pkt6[i,"Zamkniecie_pred"]
temp_df_2 <- as.data.frame(c(train$Zamkniecie, predictions_pkt6$Zamkniecie_pred[1:i]))
colnames(temp_df_2) <- c("Zamkniecie_combined")
sd_2 <- sd(temp_df_2$Zamkniecie_combined)
predictions_pkt6[i, "Lower_cena"] <- mi_2 - z_value * (sd_2 / sqrt(nrow(temp_df_2)))
predictions_pkt6[i, "Upper_cena"] <- mi_2 + z_value * (sd_2 / sqrt(nrow(temp_df_2)))
# Obliczanie przedziałów ufności dla logarytmicznych stóp zwrotu
mi_3 <- predictions_pkt6[i,"Stopa_zwrotu_log_pred"]
temp_df_3 <- as.data.frame(c(train$Stopa_zwrotu_log, predictions_pkt6$Stopa_zwrotu_log_pred[1:i]))
colnames(temp_df_3) <- c("Stopa_zwrotu_combined")
sd_3 <- sd(temp_df_3$Stopa_zwrotu_combined)
predictions_pkt6[i, "Lower_st_zw"] <- mi_3 - z_value * (sd_3 / sqrt(nrow(temp_df_3)))
predictions_pkt6[i, "Upper_st_zw"] <- mi_3 + z_value * (sd_3 / sqrt(nrow(temp_df_3)))
}
paged_table(predictions_pkt6)
# Porównanie rzeczywistych wartości z predykcjami
result_df_pkt6 <- as.data.frame(cbind(test$Zamkniecie, predictions_pkt6$Zamkniecie_pred, test$Zamkniecie_log, predictions_pkt6$Zamkniecie_log_pred, test$Stopa_zwrotu_log, predictions_pkt6$Stopa_zwrotu_log_pred))
colnames(result_df_pkt6) <- c("Zamkniecie","Zamkniecie_pred","Zamkniecie_log","Zamkniecie_log_pred","Stopa_zwrotu_log","Stopa_zwrotu_log_pred")
paged_table(result_df_pkt6)
prognoza_log_cena
reszty_2 <- residuals(prognoza_log_cena)
mu <- 0
sigma <- sd(reszty_2)
n_symulacji <- 1000
n_prognoz <- 4
prognozy_log <- matrix(0, nrow = n_symulacji, ncol = n_prognoz)
ostatni_log <- tail(train$Zamkniecie_log, 1)
set.seed(123)
for (j in 1:n_symulacji) {
prognozy_log[j, 1] <- ostatni_log + rnorm(1, mean = mu, sd = sigma)
for (i in 2:n_prognoz) {
prognozy_log[j, i] <- prognozy_log[j, i - 1] + rnorm(1, mean = mu, sd = sigma)
}
}
prognozy_ceny <- exp(prognozy_log + (sigma^2 / 2))
log_forecast_mean <- apply(prognozy_log, 2, mean)
log_ci_lower <- apply(prognozy_log, 2, function(x) quantile(x, probs = 0.025))
reszty_prog_log <- residuals(prognoza_log_cena)
mu <- 0
sigma <- sd(reszty_prog_log)
n_symulacji <- 1000
n_prognoz <- 4
prognozy_log <- matrix(0, nrow = n_symulacji, ncol = n_prognoz)
ostatni_log <- tail(train$Zamkniecie_log, 1)
set.seed(123)
for (j in 1:n_symulacji) {
prognozy_log[j, 1] <- ostatni_log + rnorm(1, mean = mu, sd = sigma)
for (i in 2:n_prognoz) {
prognozy_log[j, i] <- prognozy_log[j, i - 1] + rnorm(1, mean = mu, sd = sigma)
}
}
prognozy_ceny <- exp(prognozy_log + (sigma^2 / 2))
log_forecast_mean <- apply(prognozy_log, 2, mean)
log_ci_lower <- apply(prognozy_log, 2, function(x) quantile(x, probs = 0.025))
prognoza_log_cena
reszty_prog_log <- residuals(prognoza_log_cena)
reszty_prog_log
reszty_prog_log <- residuals(fit2)
mu <- 0
reszty_prog_log
reszty_prog_log <- residuals(fit2)
mu <- 0
sigma <- sd(reszty_prog_log)
n_symulacji <- 1000
n_prognoz <- 4
prognozy_log <- matrix(0, nrow = n_symulacji, ncol = n_prognoz)
ostatni_log <- tail(train$Zamkniecie_log, 1)
set.seed(123)
for (j in 1:n_symulacji) {
prognozy_log[j, 1] <- ostatni_log + rnorm(1, mean = mu, sd = sigma)
for (i in 2:n_prognoz) {
prognozy_log[j, i] <- prognozy_log[j, i - 1] + rnorm(1, mean = mu, sd = sigma)
}
}
prognozy_ceny <- exp(prognozy_log + (sigma^2 / 2))
log_forecast_mean <- apply(prognozy_log, 2, mean)
log_ci_lower <- apply(prognozy_log, 2, function(x) quantile(x, probs = 0.025))
log_ci_upper <- apply(prognozy_log, 2, function(x) quantile(x, probs = 0.975))
cena_forecast_mean <- apply(prognozy_ceny, 2, mean)
cena_ci_lower <- apply(prognozy_ceny, 2, function(x) quantile(x, probs = 0.025))
cena_ci_upper <- apply(prognozy_ceny, 2, function(x) quantile(x, probs = 0.975))
log_ceny_results <- data.frame(
Horyzont_Prognozy = 1:n_prognoz,
Srednia_Log_Ceny = log_forecast_mean,
Dolny_Przedzial95_Log = log_ci_lower,
Gorny_Przedzial95_Log = log_ci_upper
)
ceny_results <- data.frame(
Horyzont_Prognozy = 1:n_prognoz,
Srednia_Ceny = cena_forecast_mean,
Dolny_Przedzial95_Cena = cena_ci_lower,
Gorny_Przedzial95_Cena = cena_ci_upper
)
paged_table(log_ceny_results)
paged_table(ceny_results)
mean
reszty_fit2 <- residuals(fit2)
mu <- 0
sigma <- sd(reszty_fit2)
n_symulacji <- 1000
n_prognoz <- 4
prognozy_log <- matrix(0, nrow = n_symulacji, ncol = n_prognoz)
ostatni_log <- tail(train$Zamkniecie_log, 1)
set.seed(123)
for (j in 1:n_symulacji) {
prognozy_log[j, 1] <- ostatni_log + rnorm(1, mean = mu, sd = sigma)
for (i in 2:n_prognoz) {
prognozy_log[j, i] <- prognozy_log[j, i - 1] + rnorm(1, mean = mu, sd = sigma)
}
}
prognozy_ceny <- exp(prognozy_log + (sigma^2 / 2))
log_forecast_mean <- apply(prognozy_log, 2, mean)
log_ci_lower <- apply(prognozy_log, 2, function(x) quantile(x, probs = 0.025))
log_ci_upper <- apply(prognozy_log, 2, function(x) quantile(x, probs = 0.975))
cena_forecast_mean <- apply(prognozy_ceny, 2, mean)
cena_ci_lower <- apply(prognozy_ceny, 2, function(x) quantile(x, probs = 0.025))
cena_ci_upper <- apply(prognozy_ceny, 2, function(x) quantile(x, probs = 0.975))
log_ceny_results <- data.frame(
Horyzont_Prognozy = 1:n_prognoz,
Srednia_Log_Ceny = log_forecast_mean,
Dolny_Przedzial95_Log = log_ci_lower,
Gorny_Przedzial95_Log = log_ci_upper
)
ceny_results <- data.frame(
Horyzont_Prognozy = 1:n_prognoz,
Srednia_Ceny = cena_forecast_mean,
Dolny_Przedzial95_Cena = cena_ci_lower,
Gorny_Przedzial95_Cena = cena_ci_upper
)
paged_table(log_ceny_results)
paged_table(ceny_results)
set.seed(123)
reszty_fit2 <- residuals(fit2)
prognozy_log_bootstrap <- matrix(0, nrow = n_bootstrap, ncol = n_prognoz)
ostatni_log <- tail(train$Zamkniecie_log, 1)
for (j in 1:n_bootstrap) {
prognozy_log_bootstrap[j, 1] <- ostatni_log + sample(reszty_fit2, 1, replace = TRUE)
for (i in 2:n_prognoz) {
prognozy_log_bootstrap[j, i] <- prognozy_log_bootstrap[j, i - 1] + sample(reszty_fit2, 1, replace = TRUE)
}
}
prognozy_ceny_bootstrap <- exp(prognozy_log_bootstrap)
log_forecast_mean_bootstrap <- apply(prognozy_log_bootstrap, 2, mean)
log_ci_lower_bootstrap <- apply(prognozy_log_bootstrap, 2, function(x) quantile(x, probs = 0.025))
log_ci_upper_bootstrap <- apply(prognozy_log_bootstrap, 2, function(x) quantile(x, probs = 0.975))
cena_forecast_mean_bootstrap <- apply(prognozy_ceny_bootstrap, 2, mean)
cena_ci_lower_bootstrap <- apply(prognozy_ceny_bootstrap, 2, function(x) quantile(x, probs = 0.025))
cena_ci_upper_bootstrap <- apply(prognozy_ceny_bootstrap, 2, function(x) quantile(x, probs = 0.975))
log_ceny_bootstrap_results <- data.frame(
Horyzont_Prognozy = 1:n_prognoz,
Srednia_Log_Ceny = log_forecast_mean_bootstrap,
Dolny_Przedzial95_Log = log_ci_lower_bootstrap,
Gorny_Przedzial95_Log = log_ci_upper_bootstrap
)
ceny_bootstrap_results <- data.frame(
Horyzont_Prognozy = 1:n_prognoz,
Srednia_Ceny = cena_forecast_mean_bootstrap,
Dolny_Przedzial95_Cena = cena_ci_lower_bootstrap,
Gorny_Przedzial95_Cena = cena_ci_upper_bootstrap
)
paged_table(log_ceny_bootstrap_results)
paged_table(ceny_bootstrap_results)
Acf(reszty_sq)
acf(reszty_sq)
autoplot(model_2)
plot(model_2)
prognozy_log
prognozy_ceny
set.seed(123)
n_bootstrap <- 1000
n_prognoz <- 4
reszty_2 <- residuals(ceny_log_model)
prognozy_log_bootstrap <- matrix(0, nrow = n_bootstrap, ncol = n_prognoz)
ostatni_log <- tail(train$Zamkniecie_log, 1)
for (j in 1:n_bootstrap) {
prognozy_log_bootstrap[j, 1] <- ostatni_log + sample(reszty_2, 1, replace = TRUE)
for (i in 2:n_prognoz) {
prognozy_log_bootstrap[j, i] <- prognozy_log_bootstrap[j, i - 1] + sample(reszty_2, 1, replace = TRUE)
}
}
sigma <- sd(reszty_2)
prognozy_ceny_bootstrap <- exp(prognozy_log_bootstrap  + (sigma^2 / 2))
log_forecast_mean_bootstrap <- apply(prognozy_log_bootstrap, 2, mean)
log_ci_lower_bootstrap <- apply(prognozy_log_bootstrap, 2, function(x) quantile(x, probs = 0.025))
log_ci_upper_bootstrap <- apply(prognozy_log_bootstrap, 2, function(x) quantile(x, probs = 0.975))
cena_forecast_mean_bootstrap <- apply(prognozy_ceny_bootstrap, 2, mean)
cena_ci_lower_bootstrap <- apply(prognozy_ceny_bootstrap, 2, function(x) quantile(x, probs = 0.025))
cena_ci_upper_bootstrap <- apply(prognozy_ceny_bootstrap, 2, function(x) quantile(x, probs = 0.975))
log_ceny_bootstrap_results <- data.frame(
Horyzont_Prognozy = 1:n_prognoz,
Srednia_Log_Ceny = log_forecast_mean_bootstrap,
Dolny_Przedzial95_Log = log_ci_lower_bootstrap,
Gorny_Przedzial95_Log = log_ci_upper_bootstrap
)
ceny_bootstrap_results <- data.frame(
Horyzont_Prognozy = 1:n_prognoz,
Srednia_Ceny = cena_forecast_mean_bootstrap,
Dolny_Przedzial95_Cena = cena_ci_lower_bootstrap,
Gorny_Przedzial95_Cena = cena_ci_upper_bootstrap
)
paged_table(log_ceny_bootstrap_results)
paged_table(ceny_bootstrap_results)
